package io.simpolor.ngrinder

import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.apache.commons.lang.RandomStringUtils
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is
import static org.junit.Assert.assertThat

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class SampleSenarioNgrinderRunner {

    public static GTest test
    public static HTTPRequest request
    public static NVPair[] headers = []
    public static NVPair[] params = []
    public static Cookie[] cookies = []

    public static String randomAchievement = (('0'..'95')).join()
    public static Integer randomAchievementLength = 2

    public static String baseUri = "http://localhost:8080";
    public static String baseAchievementId = "SIMPOLOR_N";

    @BeforeProcess
    static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        test = new GTest(1, "Test1")
        request = new HTTPRequest()
        grinder.logger.info("before process.")
    }

    @BeforeThread
    void beforeThread() {
        test.record(this, "test")
        grinder.statistics.delayReports=true;
        grinder.logger.info("before thread.")
    }

    @Before
    void before() {
        request.setHeaders(headers)
        cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
        grinder.logger.info("before thread. init headers and cookies")
    }

    @Test
    void test(){

        headers = [
                new NVPair("Authorization", "eyJhbGciOiJIUzI1NiJ9.eyJtZW1iZXJfbm8iOjMwMTAzMiwiYXBwbGljYXRpb25fbm8iOjEwMDAyLCJuaWNrbmFtZSI6Ik5lc3F1aWsxIiwiZXhwaXJlX3RpbWUiOjE1Nzg1NTYzMTUxMTIsImNoZWNrIjoiWTtZO1k7TjtLUjtLUjtLTyIsImJpcnRoX2R0Ijo1NTg3NDg4MDAwMDAsInRva2VuIjoiZWUxODA3YzIyMTQ0NjhhNTA0N2NjMjQzMGJlOTVhMmY5MmU0ZGY1ODU3ODdhZDUzYjNjODcxZjNkMmU5YjZiOCJ9.HG225cgxmx8pejt17nlmVENpi2NJeYsfKH_9lXDp5gw"),
                new NVPair("Accept-Language", "ko-KR")
        ]
        request.setHeaders(headers);

        HTTPResponse resultSingle1 = request.GET(baseUri + "/"+randomSimpolorId());
        assertThat(resultSingle1.statusCode, is(200));

        HTTPResponse resultSingle2 = request.GET(baseUri + "/"+randomSimpolorId());
        assertThat(resultSingle2.statusCode, is(200));

        HTTPResponse resultSingle3 = request.GET(baseUri + "/"+randomSimpolorId());
        assertThat(resultSingle3.statusCode, is(200));
    }

    String randomSimpolorId(){
        return baseAchievementId + RandomStringUtils.random(randomAchievementLength, randomAchievement.toCharArray());
    }

}
